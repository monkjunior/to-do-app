{"version":3,"sources":["store/actions/deleteTaskAction.js","components/DoneTask.js","store/actions/makeUnDoneAction.js","components/Activity.js","components/Task.js","store/actions/makeDoneAction.js","config/Firebase.js","components/FormTask.js","store/actions/createTaskAction.js","components/ToDo.js","components/Main.js","App.js","serviceWorker.js","store/reducers/tasksReducer.js","store/reducers/rootReducer.js","index.js"],"names":["deleteTaskAction","id","collection","dispatch","getState","getFirebase","getFirestore","doc","delete","then","type","catch","err","DoneTask","props","handleClick","bind","handleButton","e","this","toString","makeUnDone","deleteDoneTask","className","name","detail","time","onClick","Component","connect","state","ownProps","old_id","firestore","get","exists","data","currentTime","Date","getTime","toLocaleDateString","toLocaleTimeString","set","compose","done","ordered","tasks","firestoreConnect","taskList","map","task","key","reverse","Task","makeDone","deleteTask","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","FormTask","handleAdd","preventDefault","document","getElementById","value","taskTime","createTask","console","log","placeholder","cols","rows","todos","createTaskAction","Main","App","Boolean","window","location","hostname","match","initState","tasksReducer","newTodos","action","push","rootReducer","combineReducers","firestoreReducer","store","createStore","applyMiddleware","thunk","withExtraArgument","reduxFirestore","reactReduxFirebase","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"2WAAaA,EAAmB,SAACC,EAAIC,GACjC,OAAO,SAACC,EAAUC,EAAX,GAAuD,EAAhCC,aAERC,EAFwC,EAAnBA,gBAG7BJ,WAAWA,GAAYK,IAAIN,GAAIO,SACxCC,MAAK,WACFN,EAAS,CACLO,KAAM,cACNT,GAAIA,OAGXU,OAAM,SAACC,GACJT,EAAS,CACLO,KAAM,kBACNE,IAAKA,SCVfC,E,kDACF,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAHN,E,wDAMNE,GACR,IAAIjB,EAAKkB,KAAKL,MAAMb,GAAGmB,WACvBD,KAAKL,MAAMO,WAAWpB,K,mCAGbiB,GACT,IAAIjB,EAAKkB,KAAKL,MAAMb,GAAGmB,WACvBD,KAAKL,MAAMQ,eAAerB,K,+BAI1B,OACI,wBAAIsB,UAAU,OAAOtB,GAAIkB,KAAKL,MAAMb,IAChC,yBAAKsB,UAAU,aACX,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,oBAEnB,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,aACVJ,KAAKL,MAAMU,MAGhB,yBAAKD,UAAU,eACX,2BAAIJ,KAAKL,MAAMW,SAGnB,yBAAKF,UAAU,aACVJ,KAAKL,MAAMY,MAEhB,yBAAKH,UAAU,kBACX,4BAAQtB,GAAG,gBAAgB0B,QAASR,KAAKJ,cACzC,4BAAQd,GAAG,gBAAgB0B,QAASR,KAAKF,sB,GAtC1CW,aA6DRC,eAfS,SAACC,EAAOC,GAC5B,OAAOA,KAGgB,SAAC5B,GACxB,MAAO,CACLmB,eAAgB,SAACrB,GACfE,EAASH,EAAiBC,EAAI,UAEhCoB,WAAY,SAACpB,GC3Da,IAAC+B,ED4DzB7B,GC5DyB6B,ED4DC/B,EC3DvB,SAACE,EAAUC,EAAX,GAAuD,EAAhCC,YAAiC,IAErD4B,GAAY3B,EAFwC,EAAnBA,gBAGvC2B,EAAU/B,WAAW,QAAQK,IAAIyB,GAAQE,MACxCzB,MAAK,SAACF,GACH,GAAIA,EAAI4B,OAAQ,CAAC,IAAD,EACoB5B,EAAI6B,OAA/BZ,EADO,EACPA,KAAMC,EADC,EACDA,OAAQC,EADP,EACOA,KAAMzB,EADb,EACaA,GACrBoC,EAAc,IAAIC,KACtBrC,EAAKoC,EAAYE,UAAUnB,WAC3BM,EAAI,UAAMW,EAAYG,qBAAlB,gBAA8CH,EAAYI,sBAC9DR,EAAU/B,WAAW,SAASK,IAAIN,GAAIyC,IAAI,CACtCzC,KACAuB,OACAC,SACAC,SAEJO,EAAU/B,WAAW,QAAQK,IAAIyB,GAAQxB,SACxCC,MAAK,WACFN,EAAS,CACLO,KAAM,eACNT,GAAIA,OAGXU,OAAM,SAACC,GACJT,EAAS,CACLO,KAAM,kBACNE,IAAKA,YAKbT,EAAS,CACLO,KAAM,kBACNE,IAAK,gBAIhBD,OAAM,SAACC,GACJT,EAAS,CACLO,KAAM,kBACNE,IAAKA,cDwBNiB,CAA6ChB,G,QEtC5D,IAMe8B,cACXd,aAPoB,SAACC,GACrB,MAAO,CACHc,KAAMd,EAAMG,UAAUY,QAAQD,MAAQd,EAAMgB,MAAMF,SAMtDG,2BAAiB,CACb,CAAE7C,WAAY,UAHPyC,EA1Bf,SAAkB7B,GACd,IACMkC,EADQlC,EAAM8B,KACGK,KAAI,SAAAC,GACvB,OACI,kBAAC,EAAD,CAAU1B,KAAM0B,EAAK1B,KAAMC,OAAQyB,EAAKzB,OAAQC,KAAMwB,EAAKxB,KAAMzB,GAAIiD,EAAKjD,GAAIkD,IAAKD,EAAKjD,QAGhG,OACI,yBAAKsB,UAAU,YACX,yBAAKA,UAAU,kBAAf,OACA,qFACA,wBAAIA,UAAU,oBACN,yBAAKA,UAAU,sBACVyB,EAASI,gBCf5BC,G,yDACF,WAAYvC,GAAO,IAAD,8BACd,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAHN,E,wDAMNE,GACR,IAAIjB,EAAKkB,KAAKL,MAAMb,GAAGmB,WACvBD,KAAKL,MAAMwC,SAASrD,K,mCAGXiB,GACT,IAAIjB,EAAKkB,KAAKL,MAAMb,GAAGmB,WACvBD,KAAKL,MAAMyC,WAAWtD,K,+BAItB,OACI,wBAAIsB,UAAU,OAAOtB,GAAIkB,KAAKL,MAAMb,IAChC,yBAAKsB,UAAU,aACX,yBAAKA,UAAU,mBACf,yBAAKA,UAAU,oBAEnB,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,aACVJ,KAAKL,MAAMU,MAGhB,yBAAKD,UAAU,eACX,2BAAIJ,KAAKL,MAAMW,SAGnB,yBAAKF,UAAU,aACVJ,KAAKL,MAAMY,MAEhB,yBAAKH,UAAU,kBACX,4BAAQtB,GAAG,cAAc0B,QAASR,KAAKJ,cACvC,4BAAQd,GAAG,gBAAgB0B,QAASR,KAAKF,sB,GAtC9CW,cA6DJC,eAfS,SAACC,EAAOC,GAC5B,OAAOA,KAGgB,SAAC5B,GACxB,MAAO,CACLoD,WAAY,SAACtD,GACXE,EAASH,EAAiBC,EAAI,WAEhCqD,SAAU,SAACrD,GC5Da,IAAC+B,ED6DvB7B,GC7DuB6B,ED6DC/B,EC5DrB,SAACE,EAAUC,EAAX,GAAuD,EAAhCC,YAAiC,IAErD4B,GAAY3B,EAFwC,EAAnBA,gBAGvC2B,EAAU/B,WAAW,SAASK,IAAIyB,GAAQE,MACzCzB,MAAK,SAACF,GACH,GAAIA,EAAI4B,OAAQ,CAAC,IAAD,EACoB5B,EAAI6B,OAA/BZ,EADO,EACPA,KAAMC,EADC,EACDA,OAAQC,EADP,EACOA,KAAMzB,EADb,EACaA,GACrBoC,EAAc,IAAIC,KACtBrC,EAAKoC,EAAYE,UAAUnB,WAC3BM,EAAI,UAAMW,EAAYG,qBAAlB,gBAA8CH,EAAYI,sBAC9DR,EAAU/B,WAAW,QAAQK,IAAIN,GAAIyC,IAAI,CACrCzC,KACAuB,OACAC,SACAC,SAEJO,EAAU/B,WAAW,SAASK,IAAIyB,GAAQxB,SACzCC,MAAK,WACFN,EAAS,CACLO,KAAM,YACNT,GAAIA,OAGXU,OAAM,SAACC,GACJT,EAAS,CACLO,KAAM,gBACNE,IAAKA,YAKbT,EAAS,CACLO,KAAM,gBACNE,IAAK,gBAIhBD,OAAM,SAACC,GACJT,EAAS,CACLO,KAAM,gBACNE,IAAKA,cDyBNiB,CAA6CwB,G,OEvD5DG,gBARe,CACbC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,mCACfC,kBAAmB,uBAKNN,Q,QCRTO,G,yDACF,WAAYjD,GAAO,IAAD,8BACd,cAAMA,IAIVkD,UAAY,SAAS9C,GACjBA,EAAE+C,iBACF,IAAIzC,EAAO0C,SAASC,eAAe,aAAaC,MAChD,GAAa,KAAT5C,EAAY,CACZ,IAAIC,EAASyC,SAASC,eAAe,eAAeC,MAChDC,EAAW,IAAI/B,KACfrC,EAAKoE,EAAS9B,UAAUnB,WACxBM,EAAI,UAAM2C,EAAS7B,qBAAf,gBAA2C6B,EAAS5B,sBAC5DtB,KAAKL,MAAMwD,WAAW,CAClBrE,KACAuB,OACAC,SACAC,SAEJ6C,QAAQC,IAAI,mBAAqBvE,EAAK,iBACtCiE,SAASC,eAAe,aAAaC,MAAQ,GAC7CF,SAASC,eAAe,eAAeC,MAAQ,KAnBnD,EAAKJ,UAAY,EAAKA,UAAUhD,KAAf,gBAFH,E,qDA0Bd,OACI,8BACI,2BAAON,KAAK,OAAO+D,YAAY,YAAYxE,GAAG,cAC9C,8BAAUuB,KAAK,GAAGvB,GAAG,cAAcyE,KAAK,IAAIC,KAAK,IAAIF,YAAY,eACjE,yBAAKlD,UAAU,kBACX,4BAAQb,KAAK,SAAST,GAAG,aAAa0B,QAASR,KAAK6C,WAApD,a,GAhCGpC,cAsDRC,eAfS,SAACC,GACrB,MAAO,CACHc,KAAMd,EAAMc,KACZgC,MAAO9C,EAAM8C,UAIM,SAACzE,GACxB,MAAO,CACLmE,WAAY,SAACpB,GACX/C,ECvDwB,SAAC+C,GAC7B,OAAO,SAAC/C,EAAUC,EAAX,GAAuD,EAAhCC,aAERC,EAFwC,EAAnBA,gBAG7BJ,WAAW,SAASK,IAAI2C,EAAKjD,IAAIyC,IAA3C,eACOQ,IAENzC,MAAK,WACFN,EAAS,CACLO,KAAM,cACNwC,KAAMA,OAGbvC,OAAM,SAACC,GACJT,EAAS,CACLO,KAAM,kBACNE,IAAKA,QDuCJiE,CAAiB3B,QAKnBrB,CAA6CkC,GE9B5D,IAMepB,cACXd,aAPoB,SAACC,GACrB,MAAO,CACH8C,MAAO9C,EAAMG,UAAUY,QAAQC,OAAShB,EAAMgB,MAAM8B,UAMxD7B,2BAAiB,CACb,CAAE7C,WAAY,WAHPyC,EA5Bf,SAAc7B,GACV,IACMkC,EADQlC,EAAM8D,MACG3B,KAAI,SAAAC,GACvB,OACI,kBAAC,EAAD,CAAM1B,KAAM0B,EAAK1B,KAAMC,OAAQyB,EAAKzB,OAAQC,KAAMwB,EAAKxB,KAAMzB,GAAIiD,EAAKjD,GAAIkD,IAAKD,EAAKjD,QAG5F,OACI,yBAAKsB,UAAU,SACX,yBAAKA,UAAU,eAAf,cAGA,mFACA,kBAAC,EAAD,MACA,wBAAIA,UAAU,gBACN,yBAAKA,UAAU,sBACVyB,EAASI,gBCLnB0B,E,uKAZP,OACI,yBAAKvD,UAAU,QACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALGK,aCMJmD,MARf,SAAcjE,GACZ,OACE,yBAAKS,UAAU,OACb,kBAAC,EAAD,QCMcyD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YClBAC,EAAY,CACdT,MAAO,GACPhC,KAAK,IA2CM0C,EAxCM,WAAgC,IAC7CC,EADczD,EAA8B,uDAAtBuD,EAAWG,EAAW,uCAGhD,OAAQA,EAAO9E,MACX,IAAK,YAED,OADA6D,QAAQC,IAAI,aACL1C,EACX,IAAK,gBAED,OADAyC,QAAQC,IAAI,mBAAqBgB,EAAO5E,KACjCkB,EACX,IAAK,cAED,OADAyC,QAAQC,IAAI,aACL1C,EACX,IAAK,kBAED,OADAyC,QAAQC,IAAI,mBAAqBgB,EAAO5E,KACjCkB,EACX,IAAK,cAED,OADAyC,QAAQC,IAAI,eACL1C,EACX,IAAK,kBAED,OADAyC,QAAQC,IAAI,mBAAqBgB,EAAO5E,KACjCkB,EACX,IAAK,cAKD,OAJAyD,EAAWzD,EAAM8C,OACRa,KAAKD,EAAOtC,MACrBqB,QAAQC,IAAI,eACZD,QAAQC,IAAIe,GACL,eACAzD,EADP,CAEI8C,MAAOW,IAEf,IAAK,kBAED,OADAhB,QAAQC,IAAI,mBAAqBgB,EAAO5E,KACjCkB,EACX,QACI,OAAOA,EAEf,OAAOA,GCjCI4D,EALKC,YAAgB,CAChC7C,MAAOwC,EACPrD,UAAW2D,qB,SCOTC,EAAQC,YAAYJ,EACxB/C,YACEoD,YAAgBC,IAAMC,kBAAkB,CAAC5F,0BAAaC,+BACtD4F,yBAAe1C,GACf2C,6BAAmB3C,KAIvB4C,IAASC,OACP,kBAAC,IAAD,CAAUR,MAAOA,GACb,kBAAC,EAAD,OAEJ3B,SAASC,eAAe,SH0GpB,kBAAmBmC,WACrBA,UAAUC,cAAcC,MACrB/F,MAAK,SAAAgG,GACJA,EAAaC,gBAEd/F,OAAM,SAAAgG,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.139aa46a.chunk.js","sourcesContent":["export const deleteTaskAction = (id, collection) => {\n    return (dispatch, getState, { getFirebase, getFirestore} ) => {\n        // make asyn call to db\n        const firestore = getFirestore();\n        firestore.collection(collection).doc(id).delete()\n        .then(()=>{\n            dispatch({\n                type: 'DELETE_TASK',\n                id: id\n            })\n        })\n        .catch((err)=>{\n            dispatch({\n                type: 'DELETE_TASK_ERR',\n                err: err\n            })\n        });\n    }\n}","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { makeUnDoneAction } from '../store/actions/makeUnDoneAction';\nimport { deleteTaskAction } from '../store/actions/deleteTaskAction';\nclass DoneTask extends Component {\n    constructor(props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n    }\n\n    handleClick(e){\n        let id = this.props.id.toString() ;\n        this.props.makeUnDone(id);\n    }\n\n    handleButton(e) {\n        let id = this.props.id.toString() ;\n        this.props.deleteDoneTask(id);\n    }\n\n    render(){\n        return(\n            <li className=\"task\" id={this.props.id} >\n                <div className=\"task-line\">\n                    <div className=\"task-line-node\"></div>\n                    <div className=\"task-line-tail\"></div>\n                </div>\n                <div className=\"task-content\">\n                    <div className=\"task-name\">\n                        {this.props.name}\n                    </div>\n\n                    <div className=\"task-detail\">\n                        <p>{this.props.detail}</p>\n                    </div>\n\n                    <div className=\"task-time\">\n                        {this.props.time}\n                    </div>\n                    <div className=\"button-wrapper\">\n                        <button id=\"undone-button\" onClick={this.handleClick}></button>\n                        <button id=\"delete-button\" onClick={this.handleButton}></button>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return ownProps;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      deleteDoneTask: (id) => {\n        dispatch(deleteTaskAction(id, 'done'))\n      },\n      makeUnDone: (id) => {\n        dispatch(makeUnDoneAction(id))\n      }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoneTask)","export const makeUnDoneAction = (old_id) => {\n    return (dispatch, getState, { getFirebase, getFirestore} ) => {\n        // make asyn call to db\n        const firestore = getFirestore();\n        firestore.collection('done').doc(old_id).get()\n        .then((doc) => {\n            if (doc.exists) {\n                let {name, detail, time, id } = doc.data();\n                let currentTime = new Date();\n                id = currentTime.getTime().toString();\n                time = `${currentTime.toLocaleDateString()}  |  ${currentTime.toLocaleTimeString()}` ;\n                firestore.collection('tasks').doc(id).set({\n                    id,\n                    name,\n                    detail,\n                    time,\n                });\n                firestore.collection('done').doc(old_id).delete()\n                .then(() => {\n                    dispatch({\n                        type: 'MAKE_UN_DONE',\n                        id: id\n                    })\n                })\n                .catch((err) => {\n                    dispatch({\n                        type: 'MAKE_UNDONE_ERR',\n                        err: err\n                    })\n                });\n            }\n            else{\n                dispatch({\n                    type: 'MAKE_UNDONE_ERR',\n                    err: 'NULL ERR'\n                })\n            }\n        })\n        .catch((err)=>{\n            dispatch({\n                type: 'MAKE_UNDONE_ERR',\n                err: err\n            })\n        });\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport DoneTask from './DoneTask';\nimport { firestore } from 'firebase';\n\nfunction Activity(props){\n    const tasks = props.done;\n    const taskList = tasks.map(task => {\n        return(\n            <DoneTask name={task.name} detail={task.detail} time={task.time} id={task.id} key={task.id}/>\n        )\n    })\n    return(\n        <div className=\"activity\">\n            <div className=\"activity-title\">Log</div>\n            <span> Click to undone task | Double click to delete task</span>\n            <ul className=\"donetask-wrapper\">\n                    <div className=\"task-wrapper-space\">\n                        {taskList.reverse()}\n                    </div>\n            </ul>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        done: state.firestore.ordered.done || state.tasks.done\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'done'}\n    ])\n)(Activity);","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport { makeDoneAction } from '../store/actions/makeDoneAction';\nimport { deleteTaskAction } from '../store/actions/deleteTaskAction';\nimport './Task.css';\nclass Task extends Component{\n    constructor(props){\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n        this.handleButton = this.handleButton.bind(this);\n    }\n\n    handleClick(e){\n        let id = this.props.id.toString()  ;\n        this.props.makeDone(id);\n    }\n\n    handleButton(e) {\n        let id = this.props.id.toString()  ;\n        this.props.deleteTask(id);\n    }  \n\n    render(){\n        return(\n            <li className=\"task\" id={this.props.id}>\n                <div className=\"task-line\">\n                    <div className=\"task-line-node\"></div>\n                    <div className=\"task-line-tail\"></div>\n                </div>\n                <div className=\"task-content\">\n                    <div className=\"task-name\">\n                        {this.props.name}\n                    </div>\n\n                    <div className=\"task-detail\">\n                        <p>{this.props.detail}</p>\n                    </div>\n\n                    <div className=\"task-time\">\n                        {this.props.time}\n                    </div>\n                    <div className=\"button-wrapper\">\n                        <button id=\"done-button\" onClick={this.handleClick}></button>\n                        <button id=\"delete-button\" onClick={this.handleButton}></button>\n                    </div>\n                </div>\n            </li>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return ownProps;\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      deleteTask: (id) => {\n        dispatch(deleteTaskAction(id, 'tasks'))\n      },\n      makeDone: (id) => {\n        dispatch(makeDoneAction(id))\n      }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task)","export const makeDoneAction = (old_id) => {\n    return (dispatch, getState, { getFirebase, getFirestore} ) => {\n        // make asyn call to db\n        const firestore = getFirestore();\n        firestore.collection('tasks').doc(old_id).get()\n        .then((doc) => {\n            if (doc.exists) {\n                let {name, detail, time, id } = doc.data();\n                let currentTime = new Date();\n                id = currentTime.getTime().toString();\n                time = `${currentTime.toLocaleDateString()}  |  ${currentTime.toLocaleTimeString()}` ;\n                firestore.collection('done').doc(id).set({\n                    id,\n                    name,\n                    detail,\n                    time,\n                });\n                firestore.collection('tasks').doc(old_id).delete()\n                .then(() => {\n                    dispatch({\n                        type: 'MAKE_DONE',\n                        id: id\n                    })\n                })\n                .catch((err) => {\n                    dispatch({\n                        type: 'MAKE_DONE_ERR',\n                        err: err\n                    })\n                });\n            }\n            else{\n                dispatch({\n                    type: 'MAKE_DONE_ERR',\n                    err: 'NULL ERR'\n                })\n            }\n        })\n        .catch((err)=>{\n            dispatch({\n                type: 'MAKE_DONE_ERR',\n                err: err\n            })\n        });\n    }\n}","import * as firebase from 'firebase';\nimport firestore from 'firebase/firestore'\n\nconst config = {\n  apiKey: \"AIzaSyC-podzmrb-krx-HDycqENO4fiElXgbR6g\",\n  authDomain: \"vungocson998.github.io/to-do-app\",\n  databaseURL: \"https://to-do-app-13683.firebaseio.com\",\n  projectId: \"to-do-app-13683\",\n  storageBucket: \"gs://to-do-app-13683.appspot.com\",\n  messagingSenderId: \"Son Vu | To do app\"\n};\nfirebase.initializeApp(config);\n\n\nexport default firebase;","import React, {Component} from 'react';\nimport firebase from '../config/Firebase';\nimport { connect } from 'react-redux';\nimport { createTaskAction } from '../store/actions/createTaskAction';\nimport './FormTask.css';\n\nclass FormTask extends Component{\n    constructor(props){\n        super(props);\n        this.handleAdd = this.handleAdd.bind(this);\n    }\n\n    handleAdd = function(e){\n        e.preventDefault();\n        let name = document.getElementById('task-name').value;\n        if (name !== \"\"){\n            let detail = document.getElementById('task-detail').value;\n            let taskTime = new Date();\n            let id = taskTime.getTime().toString();\n            let time = `${taskTime.toLocaleDateString()}  |  ${taskTime.toLocaleTimeString()}` ;\n            this.props.createTask({\n                id,\n                name,\n                detail,\n                time,\n            })\n            console.log(\"Adding Document \" + id + \" Successfully\");\n            document.getElementById('task-name').value = \"\";\n            document.getElementById('task-detail').value = \"\";\n        }\n    }\n\n    render(){\n        return(\n            <form>\n                <input type=\"text\" placeholder=\"Task name\" id=\"task-name\" />\n                <textarea name=\"\" id=\"task-detail\" cols=\"1\" rows=\"2\" placeholder=\"Detail ...\"></textarea>\n                <div className=\"button-wrapper\">\n                    <button type=\"submit\" id=\"add-button\" onClick={this.handleAdd}>Add</button>\n                </div>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        done: state.done,\n        todos: state.todos\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      createTask: (task) => {\n        dispatch(createTaskAction(task))\n      }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormTask)","export const createTaskAction = (task) => {\n    return (dispatch, getState, { getFirebase, getFirestore} ) => {\n        // make asyn call to db\n        const firestore = getFirestore();\n        firestore.collection('tasks').doc(task.id).set({\n            ...task,\n        })\n        .then(()=>{\n            dispatch({\n                type: 'CREATE_TASK',\n                task: task\n            })\n        })\n        .catch((err)=>{\n            dispatch({\n                type: 'CREATE_TASK_ERR',\n                err: err\n            })\n        });\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport { firestoreConnect } from 'react-redux-firebase';\nimport { compose } from 'redux';\nimport Task from './Task';\nimport FormTask from './FormTask';\nimport { firestore } from 'firebase';\n\nfunction ToDo(props){\n    const tasks = props.todos;\n    const taskList = tasks.map(task => {\n        return(\n            <Task name={task.name} detail={task.detail} time={task.time} id={task.id} key={task.id}/>\n        )\n    })\n    return(\n        <div className=\"to-do\">\n            <div className=\"to-do-title\">\n                To do list\n            </div>\n            <span> Click to done task | Double click to delete task</span>\n            <FormTask />\n            <ul className=\"task-wrapper\">\n                    <div className=\"task-wrapper-space\">\n                        {taskList.reverse()}\n                    </div>\n            </ul>\n        </div>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        todos: state.firestore.ordered.tasks || state.tasks.todos\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps),\n    firestoreConnect([\n        { collection: 'tasks'}\n    ])\n)(ToDo);","import React, {Component} from 'react';\nimport './Main.css';\nimport Activity from './Activity';\nimport ToDo from './ToDo';\n\nclass Main extends Component{\n    render(){\n        return(\n            <div className=\"main\">\n                <ToDo/>\n                <Activity/>\n            </div>\n        );\n    }\n    \n}\n\n\n\nexport default Main;","import React, {Component} from 'react';\nimport Main from './components/Main';\n\nfunction App (props) {\n  return (\n    <div className=\"App\">\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\n    todos: [],\n    done:[]\n}\n\nconst tasksReducer = (state = initState, action) => {\n    let newTodos;\n    let newDone;\n    switch (action.type){\n        case 'MAKE_DONE':\n            console.log('MAKE_DONE');\n            return state;\n        case 'MAKE_DONE_ERR':\n            console.log('MAKE_DONE_ERROR ' + action.err);\n            return state;\n        case 'MAKE_UNDONE':\n            console.log('MAKE_DONE');\n            return state;\n        case 'MAKE_UNDONE_ERR':\n            console.log('MAKE_DONE_ERROR ' + action.err);\n            return state;\n        case 'DELETE_TASK':\n            console.log('DELETE_TASK');\n            return state;\n        case 'DELETE_TASK_ERR':\n            console.log('DELETE_TASK_ERR ' + action.err);\n            return state;\n        case 'CREATE_TASK':\n            newTodos = state.todos;\n            newTodos.push(action.task);\n            console.log('CREATE_TASK');\n            console.log(newTodos);\n            return {\n                ...state,\n                todos: newTodos\n            }\n        case 'CREATE_TASK_ERR':\n            console.log('CREATE_TASK_ERR ' + action.err);\n            return state;\n        default:\n            return state;\n    }\n    return state;\n}\n\nexport default tasksReducer;","import { combineReducers } from 'redux'; \nimport { firestoreReducer } from 'redux-firestore';\nimport tasksReducer from './tasksReducer';\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    firestore: firestoreReducer\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers/rootReducer';\nimport thunk from'redux-thunk';\nimport { reduxFirestore, getFirestore } from 'redux-firestore';\nimport { reactReduxFirebase, getFirebase} from 'react-redux-firebase';\nimport firebase from './config/Firebase';\n\nconst store = createStore(rootReducer, \n  compose(\n    applyMiddleware(thunk.withExtraArgument({getFirebase, getFirestore})),\n    reduxFirestore(firebase),\n    reactReduxFirebase(firebase)\n  )  \n);\n\nReactDOM.render(\n  <Provider store={store}>\n      <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}